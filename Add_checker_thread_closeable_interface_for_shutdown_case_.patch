Subject: [PATCH] Add checker thread closeable interface for shutdown case.
---
Index: example/spring-kafka-protobuf/src/main/java/com/inomera/telco/commons/example/springkafka/EventPublisher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/spring-kafka-protobuf/src/main/java/com/inomera/telco/commons/example/springkafka/EventPublisher.java b/example/spring-kafka-protobuf/src/main/java/com/inomera/telco/commons/example/springkafka/EventPublisher.java
--- a/example/spring-kafka-protobuf/src/main/java/com/inomera/telco/commons/example/springkafka/EventPublisher.java	(revision 3bd812ef3a1905afb4666675fe9e8cfedad3dd8e)
+++ b/example/spring-kafka-protobuf/src/main/java/com/inomera/telco/commons/example/springkafka/EventPublisher.java	(revision e15136d517148fbb8087ba444e384bc2fa8aa1bf)
@@ -4,13 +4,12 @@
 import com.google.protobuf.GeneratedMessageV3;
 import com.inomera.echo.domain.KafkaTopicUtils;
 import com.inomera.telco.commons.springkafka.producer.KafkaMessagePublisher;
-import com.inomera.telco.commons.springkafka.producer.KafkaTransactionalMessagePublisher;
 import lombok.RequiredArgsConstructor;
 
 
 @RequiredArgsConstructor
 public class EventPublisher {
-    private final KafkaTransactionalMessagePublisher<? super GeneratedMessageV3> kafkaPublisher;
+    private final KafkaMessagePublisher<? super GeneratedMessageV3> kafkaPublisher;
 
     public void fire(GeneratedMessageV3 event) {
         final var topicName = KafkaTopicUtils.getTopicName(event.getClass());
Index: example/spring-kafka-protobuf/src/main/java/com/inomera/telco/commons/example/springkafka/SpringKafkaProtobufExampleApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/spring-kafka-protobuf/src/main/java/com/inomera/telco/commons/example/springkafka/SpringKafkaProtobufExampleApplication.java b/example/spring-kafka-protobuf/src/main/java/com/inomera/telco/commons/example/springkafka/SpringKafkaProtobufExampleApplication.java
--- a/example/spring-kafka-protobuf/src/main/java/com/inomera/telco/commons/example/springkafka/SpringKafkaProtobufExampleApplication.java	(revision 3bd812ef3a1905afb4666675fe9e8cfedad3dd8e)
+++ b/example/spring-kafka-protobuf/src/main/java/com/inomera/telco/commons/example/springkafka/SpringKafkaProtobufExampleApplication.java	(revision e15136d517148fbb8087ba444e384bc2fa8aa1bf)
@@ -13,16 +13,20 @@
 import com.inomera.telco.commons.springkafka.builder.KafkaConsumerBuilder;
 import com.inomera.telco.commons.springkafka.consumer.*;
 import com.inomera.telco.commons.springkafka.producer.KafkaMessagePublisher;
+import com.inomera.telco.commons.springkafka.producer.KafkaTransactionalMessagePublisher;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
+import javax.net.ssl.SSLContext;
+import java.util.Properties;
 import java.util.concurrent.TimeUnit;
 
 import static com.inomera.echo.domain.DomainConstants.CLASS_IDS;
 import static com.inomera.echo.domain.KafkaTopicConstants.*;
+import static org.apache.kafka.clients.producer.ProducerConfig.TRANSACTIONAL_ID_CONFIG;
 
 /**
  * @author Serdar Kuzucu
@@ -50,7 +54,7 @@
         return new PollerThreadStore();
     }
 
-    @Bean
+    @Bean(destroyMethod = "close")
     public ThreadStateChecker consumerThreadStateChecker(KafkaConsumerConfigurationProperties defaultKafkaConsumerConfigurationProperties) {
         return new PollerThreadStateChecker(consumerThreadStore(), pollerThreadNotifier(), defaultKafkaConsumerConfigurationProperties.getPollerThreadProperties());
     }
@@ -112,10 +116,24 @@
         return new EventPublisher(kafkaPublisher);
     }
 
+    @Bean
+    public TransactionalEventPublisher eventPublisher(KafkaTransactionalMessagePublisher<? super GeneratedMessageV3> transactionalKafkaPublisher) {
+        return new TransactionalEventPublisher(transactionalKafkaPublisher);
+    }
+
     @Bean
     public KafkaMessagePublisher<? super GeneratedMessageV3> kafkaPublisher(
             KafkaProducerConfigurationProperties defaultKafkaProducerConfigurationProperties,
             KafkaProtobufSerializer kafkaSerializer) {
         return new KafkaMessagePublisher<>(kafkaSerializer, defaultKafkaProducerConfigurationProperties.getProperties());
     }
+
+    @Bean
+    public KafkaTransactionalMessagePublisher<? super GeneratedMessageV3> transactionalKafkaPublisher(
+            KafkaProducerConfigurationProperties defaultKafkaProducerConfigurationProperties,
+            KafkaProtobufSerializer kafkaSerializer) {
+        Properties properties = defaultKafkaProducerConfigurationProperties.getProperties();
+        properties.put(TRANSACTIONAL_ID_CONFIG, "spring-kafka-protobuf-");
+        return new KafkaTransactionalMessagePublisher<>(kafkaSerializer, defaultKafkaProducerConfigurationProperties.getProperties());
+    }
 }
Index: example/spring-kafka-protobuf/src/main/java/com/inomera/telco/commons/example/springkafka/TransactionalEventPublisher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/spring-kafka-protobuf/src/main/java/com/inomera/telco/commons/example/springkafka/TransactionalEventPublisher.java b/example/spring-kafka-protobuf/src/main/java/com/inomera/telco/commons/example/springkafka/TransactionalEventPublisher.java
new file mode 100644
--- /dev/null	(revision e15136d517148fbb8087ba444e384bc2fa8aa1bf)
+++ b/example/spring-kafka-protobuf/src/main/java/com/inomera/telco/commons/example/springkafka/TransactionalEventPublisher.java	(revision e15136d517148fbb8087ba444e384bc2fa8aa1bf)
@@ -0,0 +1,31 @@
+package com.inomera.telco.commons.example.springkafka;
+
+import com.google.protobuf.Descriptors;
+import com.google.protobuf.GeneratedMessageV3;
+import com.inomera.echo.domain.KafkaTopicUtils;
+import com.inomera.telco.commons.springkafka.producer.KafkaTransactionalMessagePublisher;
+import lombok.RequiredArgsConstructor;
+
+
+@RequiredArgsConstructor
+public class TransactionalEventPublisher {
+    private final KafkaTransactionalMessagePublisher<? super GeneratedMessageV3> kafkaPublisher;
+
+    public void fire(GeneratedMessageV3 event) {
+        final var topicName = KafkaTopicUtils.getTopicName(event.getClass());
+        kafkaPublisher.send(topicName, attachMdcToEvent(event));
+    }
+
+    private GeneratedMessageV3 attachMdcToEvent(GeneratedMessageV3 event) {
+        final var field = event.getDescriptorForType().findFieldByName("logTrackKey");
+        if (field == null) {
+            return event;
+        }
+        if (field.getJavaType() != Descriptors.FieldDescriptor.JavaType.STRING) {
+            return event;
+        }
+        return (GeneratedMessageV3) event.toBuilder()
+                .setField(field, TransactionKeyUtils.generateTxKey())
+                .build();
+    }
+}
Index: kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/DefaultPollerThreadNotifier.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/DefaultPollerThreadNotifier.java b/kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/DefaultPollerThreadNotifier.java
--- a/kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/DefaultPollerThreadNotifier.java	(revision 3bd812ef3a1905afb4666675fe9e8cfedad3dd8e)
+++ b/kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/DefaultPollerThreadNotifier.java	(revision e15136d517148fbb8087ba444e384bc2fa8aa1bf)
@@ -13,6 +13,6 @@
 
     @Override
     public void alarm(String alarmText, Exception e) {
-        LOG.warn("Consumer is not re-started!! {}, Exception :: {}", alarmText, e);
+        LOG.warn("Consumer is not re-started!! {}, Exception :: {}", alarmText, e.toString());
     }
 }
Index: kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/PollerThreadStateChecker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/PollerThreadStateChecker.java b/kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/PollerThreadStateChecker.java
--- a/kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/PollerThreadStateChecker.java	(revision 3bd812ef3a1905afb4666675fe9e8cfedad3dd8e)
+++ b/kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/PollerThreadStateChecker.java	(revision e15136d517148fbb8087ba444e384bc2fa8aa1bf)
@@ -87,4 +87,14 @@
                 .orElse(StringUtils.EMPTY);
     }
 
+    @Override
+    public void close() {
+        if (executorService == null) {
+            return;
+        }
+        if (executorService.isShutdown()) {
+            return;
+        }
+        executorService.shutdown();
+    }
 }
Index: kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/ThreadStateChecker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/ThreadStateChecker.java b/kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/ThreadStateChecker.java
--- a/kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/ThreadStateChecker.java	(revision 3bd812ef3a1905afb4666675fe9e8cfedad3dd8e)
+++ b/kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/ThreadStateChecker.java	(revision e15136d517148fbb8087ba444e384bc2fa8aa1bf)
@@ -1,5 +1,7 @@
 package com.inomera.telco.commons.springkafka.consumer;
 
-public interface ThreadStateChecker {
+import java.io.Closeable;
+
+public interface ThreadStateChecker extends Closeable {
     void check();
 }
Index: kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/poller/DefaultConsumerPoller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/poller/DefaultConsumerPoller.java b/kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/poller/DefaultConsumerPoller.java
--- a/kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/poller/DefaultConsumerPoller.java	(revision 3bd812ef3a1905afb4666675fe9e8cfedad3dd8e)
+++ b/kafka/spring-kafka/src/main/java/com/inomera/telco/commons/springkafka/consumer/poller/DefaultConsumerPoller.java	(revision e15136d517148fbb8087ba444e384bc2fa8aa1bf)
@@ -10,7 +10,6 @@
 import com.inomera.telco.commons.springkafka.consumer.retry.DefaultRecordRetryer;
 import com.inomera.telco.commons.springkafka.consumer.retry.RecordRetryer;
 import com.inomera.telco.commons.springkafka.util.InterruptUtils;
-import org.apache.commons.lang3.math.NumberUtils;
 import org.apache.kafka.clients.consumer.*;
 import org.apache.kafka.common.TopicPartition;
 import org.apache.kafka.common.errors.WakeupException;
@@ -229,9 +228,7 @@
         this.consumer = new KafkaConsumer<>(buildConsumerProperties(), new StringDeserializer(), valueDeserializer);
         final ThreadFactory threadFactory = this.consumerThreadFactory == null
                 ? new IncrementalNamingThreadFactory(kafkaConsumerProperties.getGroupId()) : this.consumerThreadFactory;
-        int consumerPollerThreadCount = NumberUtils.toInt(getKafkaConsumerProperties().getKafkaConsumerProperties().getProperty("poller.thread.count"), 1);
-        int consumerPollerThreadAliveTimeMs = NumberUtils.toInt(getKafkaConsumerProperties().getKafkaConsumerProperties().getProperty("poller.thread.keep-alive-time"), 0);
-        this.executorService = new ThreadPoolExecutor(0, consumerPollerThreadCount, consumerPollerThreadAliveTimeMs, TimeUnit.MILLISECONDS, new SynchronousQueue<>(), threadFactory);
+        this.executorService = new ThreadPoolExecutor(0, 1, 0, TimeUnit.MILLISECONDS, new SynchronousQueue<>(), threadFactory);
         executorService.submit(this);
         running.set(true);
     }
